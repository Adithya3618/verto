# Trello Clone Setup Instructions

This file contains instructions on how to set up and run the Trello Clone application.

## Prerequisites
- Node.js (version 18 or higher recommended)
- Python 3.8 or higher
- npm (comes with Node.js)
- pip (Python package manager)

## Project Structure
- Frontend: Next.js application in the root directory
- Backend: FastAPI application in the `backend/` directory

## Setup Steps

### 1. Install Frontend Dependencies
```bash
npm install --legacy-peer-deps
```
Note: Use `--legacy-peer-deps` to resolve potential dependency conflicts.

### 2. Set Up Backend Virtual Environment
```bash
cd backend
python3 -m venv venv
```

### 3. Install Backend Dependencies
```bash
cd backend
source venv/bin/activate  # On Windows: venv\Scripts\activate
pip install fastapi uvicorn sqlalchemy bcrypt pydantic[email]
```

### 4. Initialize and Seed Database
```bash
cd backend
source venv/bin/activate  # On Windows: venv\Scripts\activate
python seed.py
```

This will:
- Create all database tables
- Create a default admin user
- Create a sample board with lists and cards

### 5. Start the Backend Server
```bash
cd backend
source venv/bin/activate  # On Windows: venv\Scripts\activate
python app.py
```

The backend API will be available at:
- API: http://localhost:8000
- Interactive docs: http://localhost:8000/docs
- Alternative docs: http://localhost:8000/redoc

### 6. Start the Frontend Server (in a separate terminal)
```bash
npm run dev
```

The frontend will be available at: http://localhost:3000

## Default Login Credentials
- Email: admin@trello.com
- Username: admin
- Password: admin123

## Database
- Uses SQLite by default
- Database file: `backend/trello.db`
- To reset the database, delete `trello.db` and run `python seed.py` again

## Environment Variables (Optional)
Create a `.env` file in the `backend` directory:
```
DATABASE_URL=sqlite:///./trello.db
SECRET_KEY=your-secret-key-here
```

## Troubleshooting
- If you encounter dependency issues, try `npm install --legacy-peer-deps --force`
- Ensure Python virtual environment is activated when running backend commands
- Make sure ports 3000 and 8000 are not in use by other applications
- If using Windows, use `venv\Scripts\activate` instead of `source venv/bin/activate`

The application should now be running at http://localhost:3000 with the backend API at http://localhost:8000.